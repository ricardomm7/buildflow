@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

actor "User" as User
participant "Reader" as Reader
participant "Repositories\n:Repositories" as Repositories
participant "ProductionTree\n:ProductionTree" as ProductionTree
participant "ProductionNode\n:ProductionNode" as ProductionNode
participant "MaterialQuantityBST\n:MaterialQuantityBST" as MaterialQuantityBST
participant "DisplayProductionTree" as DisplayProductionTree

activate User

' Step 1: Initialize Repositories
Reader -> Repositories : getInstance()
activate Reader
activate Repositories
Repositories --> Reader : repository instance
deactivate Repositories
deactivate Reader

' Step 2: Load Items
User -> Reader : loadItems("path/to/items.csv")
activate Reader
Reader -> ProductionTree : insertProductionNode(id, name, true)
activate ProductionTree
ProductionTree --> Reader : node inserted
deactivate ProductionTree
Reader -> MaterialQuantityBST : insert(ProductionNode, 0)
activate MaterialQuantityBST
MaterialQuantityBST --> Reader : success
deactivate MaterialQuantityBST
deactivate Reader

' Step 3: Load Simple Operations
User -> Reader : loadSimpleOperations("path/to/operations.csv")
activate Reader
Reader -> ProductionTree : insertProductionNode(id, name, false)
activate ProductionTree
ProductionTree --> Reader : node inserted
deactivate ProductionTree
deactivate Reader

' Step 4: Load Bill of Operations (BOO)
User -> Reader : loadBOO("path/to/boo.csv")
activate Reader
Reader -> ProductionTree : getNodeById(itemId)
ProductionTree --> Reader : node instance (or null)
Reader -> ProductionTree : insertProductionNode(itemId, itemId, true) (if null)
Reader -> ProductionTree : getNodeById(opId)
ProductionTree --> Reader : node instance (or null)
Reader -> ProductionTree : insertProductionNode(opId, opId, false) (if null)
Reader -> ProductionTree : insertNewConnection(itemId, opId, quantity)
ProductionTree --> Reader : connection added

loop For each subitem
    Reader -> ProductionTree : getNodeById(subitemId)
    ProductionTree --> Reader : node instance (or null)
    Reader -> ProductionTree : insertProductionNode(subitemId, subitemId, true) (if null)
    Reader -> ProductionTree : insertNewConnection(opId, subitemId, quantity)
    Reader -> MaterialQuantityBST : insert(subitemNode, quantity)
    MaterialQuantityBST --> Reader : success
end

deactivate Reader

' Step 5: Display Production Tree
User -> DisplayProductionTree : displayTree()
activate DisplayProductionTree

DisplayProductionTree -> ProductionTree : getAllNodes()
activate ProductionTree
ProductionTree --> DisplayProductionTree : list of all nodes
deactivate ProductionTree

alt For each node
    DisplayProductionTree -> ProductionNode : isProduct()
    activate ProductionNode
    ProductionNode --> DisplayProductionTree : true/false
    deactivate ProductionNode

    opt If product node
        DisplayProductionTree -> ProductionNode : printNode(node, level, visitedNodes)
        activate ProductionNode
        loop Traverse child nodes
            ProductionNode -> ProductionTree : getSubNodes(node)
            activate ProductionTree
            ProductionTree --> ProductionNode : subNodes and quantities
            deactivate ProductionTree

            ProductionNode -> DisplayProductionTree : printNode(subNode, level+1, visitedNodes)
            activate DisplayProductionTree
            deactivate DisplayProductionTree
        end
        deactivate ProductionNode
    end
end

DisplayProductionTree --> User : display success message
deactivate DisplayProductionTree

' Step 6: Generate Graph
User -> DisplayProductionTree : generateGraph()
activate DisplayProductionTree

DisplayProductionTree -> ProductionTree : getAllNodes()
activate ProductionTree
ProductionTree --> DisplayProductionTree : list of all nodes
deactivate ProductionTree

alt For each node
    DisplayProductionTree -> ProductionNode : isProduct()
    activate ProductionNode
    ProductionNode --> DisplayProductionTree : true/false
    deactivate ProductionNode

    opt If product node
        DisplayProductionTree -> ProductionNode : generateNodeDotRepresentation(node, dotContent, visitedNodes)
        activate ProductionNode
        loop Traverse child nodes
            ProductionNode -> ProductionTree : getSubNodes(node)
            activate ProductionTree
            ProductionTree --> ProductionNode : subNodes and quantities
            deactivate ProductionTree

            ProductionNode -> DisplayProductionTree : generateNodeDotRepresentation(subNode, dotContent, visitedNodes)
            activate DisplayProductionTree
            deactivate DisplayProductionTree
        end
        deactivate ProductionNode
    end
end

DisplayProductionTree -> FileSystem : write .dot file
activate FileSystem
FileSystem --> DisplayProductionTree : success/failure
deactivate FileSystem

DisplayProductionTree -> Runtime : execute GraphViz command
activate Runtime
Runtime --> DisplayProductionTree : success/failure
deactivate Runtime

DisplayProductionTree --> User : generateGraph success message
deactivate DisplayProductionTree
@enduml
